// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: proto/gnotch.proto

package gnotch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gnotch_Command_FullMethodName = "/gnotch.Gnotch/Command"
)

// GnotchClient is the client API for Gnotch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GnotchClient interface {
	// Command sends a command and returns a response.  To avoid imposing
	// any requirements on UTF-8 compatibility of a device, the request and
	// response data are byte arrays.
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error)
}

type gnotchClient struct {
	cc grpc.ClientConnInterface
}

func NewGnotchClient(cc grpc.ClientConnInterface) GnotchClient {
	return &gnotchClient{cc}
}

func (c *gnotchClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, Gnotch_Command_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GnotchServer is the server API for Gnotch service.
// All implementations must embed UnimplementedGnotchServer
// for forward compatibility
type GnotchServer interface {
	// Command sends a command and returns a response.  To avoid imposing
	// any requirements on UTF-8 compatibility of a device, the request and
	// response data are byte arrays.
	Command(context.Context, *CommandRequest) (*CommandResponse, error)
	mustEmbedUnimplementedGnotchServer()
}

// UnimplementedGnotchServer must be embedded to have forward compatible implementations.
type UnimplementedGnotchServer struct {
}

func (UnimplementedGnotchServer) Command(context.Context, *CommandRequest) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedGnotchServer) mustEmbedUnimplementedGnotchServer() {}

// UnsafeGnotchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GnotchServer will
// result in compilation errors.
type UnsafeGnotchServer interface {
	mustEmbedUnimplementedGnotchServer()
}

func RegisterGnotchServer(s grpc.ServiceRegistrar, srv GnotchServer) {
	s.RegisterService(&Gnotch_ServiceDesc, srv)
}

func _Gnotch_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GnotchServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gnotch_Command_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GnotchServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gnotch_ServiceDesc is the grpc.ServiceDesc for Gnotch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gnotch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnotch.Gnotch",
	HandlerType: (*GnotchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Command",
			Handler:    _Gnotch_Command_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gnotch.proto",
}
